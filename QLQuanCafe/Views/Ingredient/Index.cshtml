@model QLQuanCafe.ViewModels.IngredientViewModel;

@{
    ViewData["Title"] = "Ingredient List";
    var nameSort = (Model.SortOrder == "name") ? "name_desc" : "name";
    var supplierSort = (Model.SortOrder == "supplier") ? "supplier_desc" : "supplier";
    var unitSort = (Model.SortOrder == "unit_desc") ? "unit" : "unit_desc";
    var quantitySort = (Model.SortOrder == "quantity_desc") ? "quantity" : "quantity_desc";
    var typeSort = (Model.SortOrder == "type_desc") ? "type" : "type_desc";

}

<h1>Ingredient Manager</h1>

<form method="GET">
    <p>
        <select asp-for="IngredientType" asp-items="Model.Types">
            <option value="">All</option>
        </select>
        <input type="text" asp-for="SearchString"/>
        <input type="submit" value="Filter"/>
    </p>
</form>

<p>
    <a asp-action="Create">Create new</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th><a  asp-route-sortOrder="@nameSort"
                    asp-route-ingredientType="@Model.IngredientType"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Ingredients[0].IngredientName)</a></th>
            <th><a  asp-route-sortOrder="@supplierSort"
                    asp-route-ingredientType="@Model.IngredientType"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Ingredients[0].IngredientSupplier)</a></th>
            <th >
                @Html.DisplayNameFor(model => model.Ingredients[0].IngredientPrice) (VND)</th>
            <th><a  asp-route-sortOrder="@unitSort"
                    asp-route-ingredientType="@Model.IngredientType"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Ingredients[0].IngredientUnit)</a></th>
            <th><a  asp-route-sortOrder="@quantitySort"
                    asp-route-ingredientType="@Model.IngredientType"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Ingredients[0].IngredientQuantity)</a></th>
            <th><a  asp-route-sortOrder="@typeSort"
                    asp-route-ingredientType="@Model.IngredientType"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Ingredients[0].IngredientType)</a></th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var ingredient in Model.Ingredients)
    {
        <tr>
            <td>@ingredient.IngredientName</td>
            <td>@ingredient.IngredientSupplier</td>
            <td >@Html.DisplayFor(item => ingredient.IngredientPrice)</td> 
            <td>@ingredient.IngredientUnit</td>
            <td>@ingredient.IngredientQuantity</td>            
            <td>@ingredient.IngredientType</td>
            <td>
                <a asp-action="Edit" asp-route-id="@ingredient.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@ingredient.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@ingredient.Id">Delete</a>
            </td>
        </tr>
    }
    </tbody>
</table>

@{
    var prevDisabled = !Model.Ingredients.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Ingredients.HasNextPage ? "disabled" : "";
}

<a  class="btn btn-default @prevDisabled"
    asp-route-ingredientType="@Model.IngredientType"
    asp-route-searchString="@Model.SearchString"
    asp-route-pageIndex="@(Model.Ingredients.PageIndex -1)">Previous</a>
<a  class="btn btn-default @nextDisabled"
    asp-route-ingredientType="@Model.IngredientType"
    asp-route-searchString="@Model.SearchString"
    asp-route-pageIndex="@(Model.Ingredients.PageIndex +1)">Next</a>